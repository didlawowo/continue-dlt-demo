# -*- coding: utf-8 -*-
"""Public: Continue_finetune_on_dev_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jjb14BDlEeGjRmeXnfm41gDBlTNvsscn
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install git+https://github.com/huggingface/transformers.git@638c423
# %pip install accelerate==0.27.1
# %pip install datasets>=2.16.1
# %pip install bitsandbytes==0.41.3
# %pip install peft==0.8.2
# %pip install trl==0.7.10
# %pip install wandb==0.16.3
# %pip install huggingface_hub==0.20.3

from huggingface_hub import notebook_login

notebook_login()

import argparse
import multiprocessing
import os

import torch
import transformers
from accelerate import PartialState
from datasets import load_dataset
from peft import LoraConfig
from transformers import (
    AutoModelForCausalLM,
    BitsAndBytesConfig,
    logging,
    set_seed,
)
from trl import SFTTrainer

from google.colab import userdata


def print_trainable_parameters(model):
    """
    Prints the number of trainable parameters in the model.
    """
    trainable_params = 0
    all_param = 0
    for _, param in model.named_parameters():
        all_param += param.numel()
        if param.requires_grad:
            trainable_params += param.numel()
    print(
        f"trainable params: {trainable_params} || all params: {all_param} || trainable%: {100 * trainable_params / all_param}"
    )


def main():
    # config
    bnb_config = BitsAndBytesConfig(
        load_in_4bit=True,
        bnb_4bit_quant_type="nf4",
        bnb_4bit_compute_dtype=torch.bfloat16,
    )
    lora_config = LoraConfig(
        r=8,
        target_modules=[
            "q_proj",
            "o_proj",
            "k_proj",
            "v_proj",
            "gate_proj",
            "up_proj",
            "down_proj",
        ],
        task_type="CAUSAL_LM",
    )

    # load model and dataset
    token = userdata.get('hf_token')
    model = AutoModelForCausalLM.from_pretrained(
        "bigcode/starcoder2-3b",
        device_map="auto",
        attention_dropout=0.1,
    )
    print_trainable_parameters(model)

    data = load_dataset(
        "oakela/autocompletion_continue_data",
        split="train",
        token=token,
        num_proc=multiprocessing.cpu_count(),
    )
    data = data.remove_columns(["time", "modelProvider", "modelName", "cacheHit", "accepted", "_dlt_load_id", "_dlt_id"])


    # setup the trainer
    trainer = SFTTrainer(
        model=model,
        train_dataset=data,
        max_seq_length=1024,
        args=transformers.TrainingArguments(
            per_device_train_batch_size=1,
            gradient_accumulation_steps=4,
            warmup_steps=20,
            max_steps=1000,
            learning_rate=2e-4,
            lr_scheduler_type="cosine",
            weight_decay=0.01,
            logging_strategy="steps",
            logging_steps=10,
            output_dir="starcoder2_dev_data",
            optim="paged_adamw_8bit",
            seed=0,
        ),
    )

    # launch
    print("Training...")
    trainer.train()

    print("Saving the last checkpoint of the model")

    trainer.push_to_hub("oakela/starcoder2_dev_data")
    print("Training Done! ðŸ’¥")


if __name__ == "__main__":
    set_seed(0)

    logging.set_verbosity_error()

    main()